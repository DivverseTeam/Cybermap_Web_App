
name: Build, Push to ECR, and Deploy to Docker Compose - EC2

on:
  push:
    branches:
      - development

env:
  AWS_REGION: us-east-1
  CYBERMAP_ECR: 442042540581.dkr.ecr.us-east-1.amazonaws.com/cybermap

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: "${{ secrets.ACCESS_KEY }}" 
          aws-secret-access-key: "${{ secrets.SECRET_KEY }}" 
          aws-region: "${{ env.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region "${{ env.AWS_REGION }}" | docker login --username AWS --password-stdin "${{ env.CYBERMAP_ECR }}"

      - name: Build Docker image
        run: |
          docker build -t cybermap .

      - name: Tag Docker image
        run: |
          docker tag cybermap:latest "${{ env.CYBERMAP_ECR }}:latest"

      - name: Push Docker image to Amazon ECR
        run: |
          docker push "${{ env.CYBERMAP_ECR }}:latest"

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Write private key to file
        run: |
          echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

      - name: Add SSH key
        run: |
          eval "$(ssh-agent -s)"
          ssh-add /tmp/private_key

      - name: Deploy to server
        run: |
          ssh -i /tmp/private_key -o StrictHostKeyChecking=no ubuntu@3.235.83.252 << 'EOF'
            export AWS_REGION=${AWS_REGION}
            export CYBERMAP_ECR=${CYBERMAP_ECR}
            aws ecr get-login-password --region "${{ env.AWS_REGION }}" | docker login --username AWS --password-stdin "${{ env.CYBERMAP_ECR }}"
            docker image prune -a -f
            docker pull "${{ env.CYBERMAP_ECR }}:latest"
            docker compose down
            docker compose up -d
          EOF
